package sectorWork;

import java.util.ArrayList;
import java.util.Scanner;

public class MyFile {	
	
//ATTRIBUTES
	public boolean isFile;
	public boolean isDirectory;
	public boolean modified;
	public boolean readOnly;
	public boolean ATTR_Sys;
	public boolean ATTR_VOLID;
	public boolean hidden;
	public boolean longDir = false;
	public String Attr_Type;
	

	
	public ArrayList<MyFile> children;
	public String name;
	public ArrayList<Character> text;
	public int fileSize; 
	public byte[] entry;
	public int address;
	public int clusterNum;
	public MyFile parent;
	
	
	
	
	public MyFile(byte[] entry, MyFile parent){
		this.parent = parent;
		if(entry[11] == 0x0F){
			longDir = true;
		}
		children =  new ArrayList<MyFile>();
		this.entry = entry;
		name = byteToString();
		
		if(ATTR_VOLID = parseATTR(entry[11] & 0x08)){
			isDirectory = true;
			isFile = false;
		}
		else{
			isDirectory = parseATTR(entry[11] & 0x10);
			isFile = !isDirectory;
		}
		readOnly = parseATTR(entry[11] &  0x01);
		hidden = parseATTR(entry[11] & 0x02);
		ATTR_Sys = parseATTR(entry[11] & 0x04);
		modified = parseATTR(entry[11] & 0x20);
		if(parseATTR(entry[11] &  0x01))
		{
			Attr_Type = "ATTR-READ_ONLY";
		}else if(parseATTR(entry[11] & 0x02))
		{
			Attr_Type = "ATTR-HIDDEN";
		}else if(parseATTR(entry[11] & 0x04))
		{
			Attr_Type = "ATTR-SYSTEM";
		}else if(parseATTR(entry[11] & 0x08))
		{
			Attr_Type = "ATTR-VOLUME_ID";
		}else if(parseATTR(entry[11] & 0x10))
		{
			Attr_Type = "ATTR-DIRECTORY";
		}else if(parseATTR(entry[11] & 0x20))
		{
			Attr_Type = "ATTR-ARCHIVE";
		}
		
		clusterNum = fourBytesToInt(21, 20, 27, 26);
		fileSize = fourBytesToInt(31, 30, 29, 28);
		address = getAddress();
	}
	
	private boolean parseATTR(int num){
		//Byte cmp11 = (byte) (myByte & 0x num);
		//System.out.println(num);
		if(num != 0){
			return true;
		}
		else{
			return false;
		}
		
	}
	//takes two integers and returns a string of the bytes between those indexes
	//used for the name of the file
	private String byteToString() {
		byte[] toString = new byte[12];
		boolean needDot = false;
		if(entry[8] > 32 && entry[8] < 126){
			needDot = true;
		}
		
		int stringCounter = 0;
		for(int i = 0; i< 12; i++ )
		{
			if(needDot && i == 8){
				toString[i] = '.';
				continue;
			}
			else{
				toString[i] =  " ";
			}
			toString[i] = entry[stringCounter];
			stringCounter++;
		}
		
		String toReturn = new String(toString);
		toReturn = toReturn.replaceAll(" ", "");
		
		return toReturn;
	}

	//check again later
	private int getAddress(){
		int rtn = ((Fat32_reader.BPB_BytsPerSec * Fat32_reader.BPB_SecPerClus) * (clusterNum - 2) ) 
				+ Fat32_reader.rootAddr;
		return rtn;
	}
	
	


	//endian helper methods to cast to ints 
	private int fourBytesToInt(int first, int second, int third, int fourth)
	{
		return ((entry[first] << 24) | ((entry[second] & 0x000000FF) << 16)  | ((entry[third] & 0x000000FF) << 8 ) | (entry[fourth] & 0x000000FF));
	}
	private int twoBytesToInt(int first, int second)
	{
		return (((entry[first] & 0x000000FF) << 8 ) | (entry[second] & 0x000000FF));
	}
	
	public void main()
	{
		byte sds = 0x4E;
		Byte[] test = {0x46, 0x53, 0x49, 0x4E, 0x46, 0x4F,
				0x20, 0x20,  0x54, 0x58, 0x54, 0x20, 0x00,
				0x64, (byte) 0xBB, 0x36, (byte) 0x87, 0x44, (byte) 0x89, 0x4C,
				0x00, 0x00, (byte) 0xBB, 0x36, (byte) 0x87, 0x44, 0x03,
				0x00, 0x60, 0x01, 0x00, 0x00};
	}
}
